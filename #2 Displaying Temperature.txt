#2 0 Displaying Temperature

Current weather data에 Unit format을 보면 2개의 옵션이있다. unit=imperial랑 unit=metric
Metric은 Celsius(섭씨) 원할때, Celsius가 우리가 원하는것이다.
왜냐면 우리가 가져온 포멧에서는 화씨로 작성되어있다. 한국에서는 섭씨를 사용하니까 섭시로 바꾸어보자.
우리들의 쿼리에다가 다음의 문구를 추가해보도록 하자.
&units=metric
이렇게 바꾸면 성공적으로 섭씨로 적용이 완료되었다. 그리고 우리는 받아온 json에서 날씨를 신경써야하는데 날씨는 배열로되어있다.
 
그리고 계획을 세워보자. 이걸 배열을 보면 온도랑 아이콘이 필요하다. 그게 첫번쨰로 해야할일이다. 우리는 온도를 가지고 있지만 아이콘은 가지고 있지 않다. 만들어야한다.
우리가 가진 모든 다른옵션을 만들어야한다. 예를들면 날씨정보를 주는곳에서 name="haze"이고 다른것은 "Clouds"이다. 그래서 이 name들을 전부알아야한다. 하지만 지금은 신경쓰지말자.
다시! 이 name들이 필요하냐면, 만약에 name이 haze라면.. 사용자에게 haze를 보여줄것이다. 어딨을까? haze? 여기는 없다.(니콜라스가 만든것)
그래서 우리가 전부 알아야한다. 컬러도 다를것이고, 아이콘도, 텍스트도 달라질것이니까

지금은 일단 temperature 컴포넌트만 하자. 컴포넌트를 만드는데 이름은 Weather.js 이고 이것은 몇개의 props를 가질것이다.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
props,state란?
데이터를 다룰때 사용되는 개념이다. 

props는 부모 컴포넌트가 자식컴포넌트에게 전달하는데이터로 자식입장에서는 읽기전용이다.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
그러므로 우리는 하나를 install 해주어야 한다.
npm install prop-types 

Weather.js에다가

import React from "react";
import { View, Text, StyleSheet } from "react-native";		// 그 View는 텍스트가 있따.
import PropTypes from "prop-types";

export default function Weather({ temp }) {		//
  //Text는 temoerature가 될것이다.
  return (						//무언가를 리턴하긴 해야한다.
    <View style={styles.container}>			//view를 리턴하자. 그 view는 text를 가지고 있을것이다.
      <Text>{temp}</Text>
    </View>
  );
}

Weather.PropTypes = {
  temp: PropTupes.number.isRequired, 		//temp는 number가 될것이다.(온도는 숫자이기 때문에)
};

const styles = StyleSheet.create({			//stylesheet 만들기
  container: {					//이것의 이름은 container
    flex: 1,
    justifyContent: "center",				//모든것을 중심으로 가게하자
    alignItems: "center",
  },
});

그리고 weather는 stateless 컴포넌트가 될것이다.
export default Weather(){
    
}
이렇게 작성해주자 그리고 app.js에서
  render() {
    const { isLoading, temp } = this.state;
    return isLoading ? <Loading /> : <Weather temp={Math.round(temp)} />;
  }
}

  return isLoading ? <Loading /> : null;을 이렇게 바꿔주자.


#2.1 Getting the Condition Names

Open Weather에서 API documentation에 가보면 여기 Current Weather data에 List of condition codes가 있다.
여기서 우리는 icons들은 신경쓰지 않을것이고, names들은 신경을 써야한다. thunderstrom이 그중에 하나이고, 복사-붙여넣기를 하자.

그래서 Weather.js에서 Weather.propTypes밑에다가 아래의 내용을 추가해주자.
condition: PropTypes.oneOf([
    "Thunderstorm",
    "Drizzle",
    "	Rain",
    "	Snow",
    "Clear",
    "Clouds",
    "Atmosphere",
  ]).isRequired,		// isRequired도 해주어야 불평하지 않는다. 

근데 여기까지 해주면 value가 undefined가 됐다. 지금 그말은, condition name을 넣어 줘야 한다는 의미이다.
App.js로 가서 state가 들어가는 부분에다가 condition을 추가해주도록 하자. 하지만 이것은 좋은방법이아니다.

우리가 받고 있는 response는 이것이다. 우리가 원하는것은 condition 네임들이고 이경우에는 Weather안에 딱하나의 배열이있다. 그리고 main에 condition네임이 있다. 그래서 첫번째 요소를 가져와야한다.

#2.2 Icons and Styling

아이콘 작업을 위해서, expo가 다룰것들을 가지고있다. 여기 보면 expo/vector-icons이라는 걸 이미 가지고있다. 
expo/vector-icons: 이 라이브러리는 expo init을 통해 만들어진 템플릿 프로젝트에 티폴트로 인스톨되어집니다. 그말인즉 그냥 여기로 와서 아이콘을 여기에 import할수 있다는 것이다.
Weather.js에가서, 아이콘을 import하고 저장하도록 하자.

import { Ionicons } from '@expo/vector-icons';
아이콘 디렉토리가 있다. 아이콘 디렉토리를 살펴보자 여기보면 많은 아이콘 패밀리들이 있다. 하나는 AntDesign.. 나중에 다른게 하나 더있는데 Entypo 그리고 Evilicons..등등 엄청많다.
이제 하나를 선택해야만 한다. 내가 원하는것은 얘네들 대부분 아이콘을 가지고 있는것을 선택하고 싶다.
우리는 얘들중에 하나를 골라야하는데 니콜라스는 material communityicons를 선택을 할것이다.
왜냐면 우리가 필요한것들을 많이 가지고있다. 

그렇게 아이콘의 종류를 골랐으면 그이름을 copy하고 그 아이콘을 import 하고 그리고 우리가 해야할것은
아이콘들을 어떻게 expo에 포함시키냐이다. 그것은 매우쉽다.
우리는 materialcommunity icons을 사용하고, name은 우리가 원하는 이름을 써주자.
<MaterialCommunityIcons name="weather-sunny" size={24} color="black" /> 이런식으로해주면된다.

그리고 다음 비디오에서는 배경색 작업을 할것이다. 왜냐면 생각하는것만큼 쉽지않다. 이건 css가 아니라 gradient이기 때문이다.
css에서는 gradient하기 쉬운데 리액트네이티브에서는 뭔가를 더해야한다.


#2.3 Background Gradient

우리가 이용하고 싶은것은 LinearGradient라는 것이다. 
그래서 밑의 문구를 입력해서 다운로드 받도록 하자.
expo install expo-linear-gradient

그리고 사용할 파일에다가 하단의 문구를 import 해주면된다.
import { LinearGradient } from 'expo-linear-gradient';

그리고 공식문서에 나온것을 복사해서 사용해보자.
<LinearGradient
          colors={['#4c669f', '#3b5998', '#192f6a']}
          style={{ padding: 15, alignItems: 'center', borderRadius: 5 }}>
</LinearGradient>

잘적용이 된다. 따라서 LinearGradient는 view 같은것이다.

그리고 우리는 상태바의 색깔이 검정색인데 이것을 다른색깔로 바꾸고 싶다 그것역시도 리액트 네티이브에 존재한다.
임포트문을 이렇게해준다.
import { View, Text, StyleSheet, StatusBar } from "react-native";

그리고 하단의 문구를 나의 컴포넌트안에 넣어야한다.
<StatusBar>

그리고 이제 뭘할거냐면 

#2.4 Titles and Subtitles
타이틀 및 섭타이틀 설정